version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: news_postgres
    environment:
      POSTGRES_DB: news_db
      POSTGRES_USER: news_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database_setup.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U news_user -d news_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - news_network

  sglang:
    image: lmsysorg/sglang:latest
    container_name: news_sglang
    ports:
      - "30000:30000"
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
    command: >
      python -m sglang.launch_server
      --model-path Qwen/Qwen3-4B-AWQ
      --host 0.0.0.0
      --port 30000
      --tp 1
      --max-total-tokens 16384
      --mem-fraction-static 0.85
    volumes:
      - sglang_cache:/root/.cache/huggingface
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 14G
    shm_size: '2gb'
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:30000/health || exit 1"]
      interval: 45s
      timeout: 15s
      retries: 20
      start_period: 900s
    restart: unless-stopped
    networks:
      - news_network

  # rss_parser:
  #   build:
  #     context: ./rss_parser
  #     dockerfile: Dockerfile
  #   container_name: news_rss_parser
  #   environment:
  #     DATABASE_URL: postgresql://news_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/news_db
  #     SGLANG_URL: http://sglang:30000
  #   volumes:
  #     - ./rss_parser/input:/app/input:ro
  #     - ./rss_parser/output:/app/output
  #   restart: unless-stopped
  #   networks:
  #     - news_network

  api:
    build:
      context: ./api
      dockerfile: Service.Dockerfile
    container_name: news_api
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://news_user:${DB_PASSWORD:-secure_password_123}@postgres:5432/news_db
      SECRET_KEY: ${SECRET_KEY:-your_secret_key_here_change_in_production}
      SGLANG_URL: http://sglang:30000/v1
    volumes:
      - ./rss_parser/output:/app/rss_parser/output:ro
    depends_on:
      postgres:
        condition: service_healthy
      sglang:
        condition: service_healthy
      # rss_parser:
      #   condition: service_started
    restart: unless-stopped
    networks:
      - news_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  sglang_cache:

networks:
  news_network:
    driver: bridge